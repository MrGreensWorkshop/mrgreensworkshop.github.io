[ { "title" : "ラズパイピコでZephyrOS動かし、VS Codeでデバッグしてみよう" ,"category" : "マイコン" ,"tags" : "ラズパイピコ, zephyr rtos, picoprobe" ,"url" : "/ja/2022-06-16-raspberry-pi-pico-zephyr-os-part-2" ,"date" : "2022年06月16日" ,"content" : "この投稿では、Zephyr RTOS用のアプリを作る方法と、ラズパイピコでデバッグする方法について説明します。こちらのビデオで、開発環境のセットアップ方法について説明していますので、必要に応じてそちらを先に見てください。 サンプルアプリの選択 やりたいことに近い、ベースとなるサンプルアプリを選びましょう。今回は、外部割り込みのサンプルが必要です。Zephyrのサンプルアプリフォルダーを確認してみましょう。 $ cd ~/zephyrproject/zephyr/samples $ ls application_development drivers posix arch hello_world sensor basic index.rst shields bluetooth kernel subsys boards modules synchronization classic.rst net tfm_integration compression philosophers userspace $ cd basic $ ls basic.rst blinky_pwm fade_led rgb_led threads blinky button minimal servo_motor $ cd button $ ls CMakeLists.txt README.rst prj.conf sample.yaml src ボタンサンプルのソースコードを確認してみましょう。ここに外部割り込み設定があります。 cat src/main.c ... void main(void) { ... ret = gpio_pin_interrupt_configure_dt(&amp;button, GPIO_INT_EDGE_TO_ACTIVE); ... gpio_init_callback(&amp;button_cb_data, button_pressed, BIT(button.pin)); gpio_add_callback(button.port, &amp;button_cb_data); ... } このサンプルアプリをベースにします。 スタンドアロンZephyrアプリの作成方法 アプリケーションは３種類あります。 zephyrproject/zephyr/ フォルダーにあるアプリは、Zephyrリポジトリアプリケーションと呼ばれています。 zephyrproject フォルダーにあるアプリは、Zephyrワークスペースアプリケーションと呼ばれています。 zephyrproject フォルダーの外にあるアプリケーションは、Zephyr自立型アプリケーションと呼ばれています。 &lt;home&gt;/ ├─── zephyrproject/ │ ├─── .west/ │ │ └─── config │ ├─── zephyr/ │ │ ├── arch/ │ │ ├── boards/ │ │ ├── cmake/ │ │ ├── samples/ │ │ │ ├── hello_world/ -&gt; Zephyrリポジトリアプリケーション │ │ │ └── ... │ │ ├── tests/ │ │ └── ... │ ├── bootloader/ │ ├── modules/ │ ├── ... │ └── applications/ │ └── app/ -&gt; Zephyrワークスペースアプリケーション │ └─── app/ -&gt; Zephyr自立型アプリケーション ├── CMakeLists.txt ├── prj.conf └── src/ └── main.c Zephyr Project参考資料: アプリケーション開発 今回は自立型アプリケーションを作って行きます。ボタンサンプルフォルダーをコピーすることから始めましょう。プロジェクトフォルダー名やプロジェクトフォルダーパスにスペースがあるとコンパイルが通りませんので、スペースを使わないでください。 cd ~/ cp -R ~/zephyrproject/zephyr/samples/basic/button ~/Desktop/gpio_int_test ボタンサンプルは変更なしでnucleoボード用にコンパイルできるので、最初にnucleoボード用にコンパイルしてみます。 $ cd ~/Desktop/gpio_int_test $ west build -b nucleo_f411re usage: west [-h] [-z ZEPHYR_BASE] [-v] [-V] &lt;command&gt; ... west: error: argument &lt;command&gt;: invalid choice: 'build' (choose from 'init', 'update', 'list', 'manifest', 'diff', 'status', 'forall', 'help', 'config', 'topdir', 'selfupdate') $ 資料によると、いくつかの環境変数を設定する必要があります。これは、また後で直します。 Zephyr Project参考資料: 環境変数 一時的に、Zephyr環境スクリプトを実行します。これで、環境変数はターミナルが閉じるまで使えます。 $ source ~/zephyrproject/zephyr/zephyr-env.sh $ west build -b nucleo_f411re -- west build: generating a build system Loading Zephyr default modules (Zephyr base). -- Application: /Users/user/Desktop/gpio_int_test -- Found Python3: /usr/local/opt/python@3.9/bin/python3.9 (found suitable exact version \"3.9.13\") found components: Interpreter -- Cache files will be written to: /Users/user/Library/Caches/zephyr -- Zephyr version: 3.0.99 (/Users/user/zephyrproject/zephyr) -- Found west (found suitable version \"0.13.1\", minimum required is \"0.7.1\") -- Board: nucleo_f411re ... [156/156] Linking C executable zephyr/zephyr.elf Memory region Used Size Region Size %age Used FLASH: 15108 B 512 KB 2.88% SRAM: 4416 B 128 KB 3.37% IDT_LIST: 0 GB 2 KB 0.00% 問題なくコンパイルが通りました。 VS Codeプロジェクトのセットアップ VS CodeでスタンドアロンZephyrアプリをセットアップしましょう。コピーしたプロジェクトフォルダーをVS Codeで開きます。ビルドフォルダーを削除します。 Zephyr環境変数をプロジェクトに追加しましょう。これにより、環境変数がVS Codeターミナルに追加されます。 新しいフォルダーを作り、名前を .vscode にします。 そして、中に新しいファイルを作り、名前を settings.json にします。 ここに環境変数設定を入れます。 { \"terminal.integrated.env.osx\": { \"PATH\": \"$HOME/zephyrproject/zephyr/scripts\", \"ZEPHYR_BASE\": \"${env:HOME}/zephyrproject/zephyr\", }, \"terminal.integrated.env.linux\": { \"PATH\": \"$HOME/zephyrproject/zephyr/scripts:${env:PATH}\", \"ZEPHYR_BASE\": \"${env:HOME}/zephyrproject/zephyr\", }, \"terminal.integrated.env.windows\": { \"PATH\": \"${env:USERPROFILE}\\\\zephyrproject\\\\zephyr\\\\scripts;${env:PATH}\", \"ZEPHYR_BASE\": \"${env:USERPROFILE}\\\\zephyrproject\\\\zephyr\", }, } ワークスペース設定の詳細については、こちらを参照してください。 次に、プロジェクトを再度開き、コンパイルしてみます。 $ west build -b nucleo_f411re -- west build: generating a build system Loading Zephyr default modules (Zephyr base). -- Application: /Users/user/Desktop/gpio_int_test -- Found Python3: /usr/local/opt/python@3.9/bin/python3.9 (found suitable exact version \"3.9.13\") found components: Interpreter -- Cache files will be written to: /Users/user/Library/Caches/zephyr -- Zephyr version: 3.0.99 (/Users/user/zephyrproject/zephyr) -- Found west (found suitable version \"0.13.1\", minimum required is \"0.7.1\") -- Board: nucleo_f411re ... [156/156] Linking C executable zephyr/zephyr.elf Memory region Used Size Region Size %age Used FLASH: 15108 B 512 KB 2.88% SRAM: 4416 B 128 KB 3.37% IDT_LIST: 0 GB 2 KB 0.00% 問題なくコンパイルが通りました。 ボード名を設定しましょう。CMakeListsファイルを開き、cmake_minimum_requiredの後にset(BOARD rpi_pico)を足してください。 ... cmake_minimum_required(VERSION 3.20.0) set(BOARD rpi_pico) ... ボードオプションなしでコンパイルしてみましょう。 $ west build -p ... /Users/user/Desktop/gpio_int_test/src/main.c:22:2: error: #error \"Unsupported board: sw0 devicetree alias is not defined\" 22 | #error \"Unsupported board: sw0 devicetree alias is not defined\" | ^~~~~ [117/160] Building C object zephyr/drivers/gpio/CMakeFiles/drivers__gpio.dir/gpio_rpi_pico.c.obj ninja: build stopped: subcommand failed. FATAL ERROR: command exited with status 1: /usr/local/bin/cmake --build /Users/user/Desktop/gpio_int_test/build ラズパイピコボードにスイッチがないため、コンパイルエラーが発生しました。 Switch0の追加 switch0を追加しましょう。このために、アプリオーバーレイファイルを使います。nucleoボードのデバイスオーバーレイファイルでswitch0の定義を確認してみましょう。 $ cat /Users/wizard/zephyrproject/zephyr/boards/arm/nucleo_f411re/nucleo_f411re.dts ... / { gpio_keys { compatible = \"gpio-keys\"; user_button: button { label = \"User\"; gpios = &lt;&amp;gpioc 13 GPIO_ACTIVE_LOW&gt;; }; }; aliases { led0 = &amp;green_led_2; sw0 = &amp;user_button; }; }; ... 新しいファイルを作り、名前を app.overlay にします。必要なものをその中に入れましょう。 / { gpio_keys { compatible = \"gpio-keys\"; user_button: button { label = \"User\"; gpios = &lt;&amp;gpio0 28 GPIO_ACTIVE_LOW&gt;; }; }; aliases { sw0 = &amp;user_button; }; }; Zephyr Project参考資料: Device tree HOW TOs 私の回路で、スイッチはGPIO28に接続されています。回路図は後でお見せします。 コンパイルしてみましょう。 $ west build -p WARNING: This looks like a fresh build and BOARD is unknown; so it probably won't work. To fix, use --board=&lt;your-board&gt;. Note: to silence the above message, run 'west config build.board_warn false' -- west build: generating a build system ... [160/160] Linking C executable zephyr/zephyr.elf Memory region Used Size Region Size %age Used BOOT_FLASH: 256 B 256 B 100.00% FLASH: 11940 B 2096896 B 0.57% SRAM: 3760 B 264 KB 1.39% IDT_LIST: 0 GB 2 KB 0.00% Converting to uf2, output size: 24576, start address: 0x10000000 Wrote 24576 bytes to zephyr.uf2 $ gpio_int_test % やったー！ バイナリファイルは build/zephyr フォルダーにあります。 westコマンドの詳細について、以下の資料を参考にしてください。 Zephyr Project参考資料: ビルド、フラッシュ、およびデバッグ デバッグする方法 ラスパイピコ上のZephyrOS + アプリを使用したオンチップデバッグ 必要なもの ハードウェアデバッガインターフェイス（SWD） picoprobe ファームウェアが書き込まれたラスパイピコ オンチップデバッグ用のソフトウェア picoprobe用のOpenOCDビルド アームツールチェーン arm-none-eabi-gdb VS Code の Cortex-Debug 拡張機能 オンチップデバッグするには、いくつかのハードウェアとソフトウェアが必要です。 一つずつ準備していきましょう。 ハードウェアデバッガーインターフェイス まずはハードウェアです。ハードウェアデバッガーインターフェイスとしてpicoprobeを使います。 picoprobe用にコンパイルされたバイナリをダウンロードし、ラズパイピコに書き込みましょう。このリンクを開き、 Debugging using another Raspberry Pi Pico の下にある　Download the UF2 file　からダウンロードしてください。 ラズパイピコのbootselボタンを押しながらパソコンに差し、ブートローダーモードにします。 $ cp ~/Downloads/picoprobe.uf2 /Volumes/RPI-RP2/ OpenOCDのビルド 現在、OpenOCDはpicoprobeを公式にサポートしていないので、picoprobe用のバージョンをビルドする必要があります。 macOS用 cd ~/ brew install libtool automake libusb wget pkg-config gcc texinfo git clone https://github.com/raspberrypi/openocd.git --branch picoprobe --depth=1 cd openocd export PATH=\"/usr/local/opt/texinfo/bin:$PATH\" ./bootstrap ./configure --enable-picoprobe --disable-werror make -j4 Linux用 cd ~/pico sudo apt install automake autoconf build-essential texinfo libtool libftdi-dev libusb-1.0-0-dev git clone https://github.com/raspberrypi/openocd.git --branch picoprobe --depth=1 --no-single-branch cd openocd ./bootstrap ./configure --enable-picoprobe make -j4 sudo make i これはOpenOCDのラズパイピコ固有のバージョンなので、「makeinstall」を実行する必要はありません。後でOpenOCDのパスを VS Code プロジェクトに設定します。 OpenOCDを確認してみましょう。 $ ~/openocd/src/openocd --version Open On-Chip Debugger 0.11.0-g4f2ae61 (2022-06-08-15:59) Licensed under GNU GPL v2 For bug reports, read http://openocd.org/doc/doxygen/bugs.html ARMツールのインストール macOS用 cd ~/ brew tap eblot/armeabi brew install arm-none-eabi-gdb arm-none-eabi-gdbを確認してみましょう。 $ arm-none-eabi-gdb --version GNU gdb (GDB) 10.1 Copyright (C) 2020 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt; This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. VS Codeの設定 まず、Cortex-Debugをインストールします。 settings.jsonファイルを開き、OpenOCDのバイナリパスを追加します。 { \"cortex-debug.openocdPath\": \"${env:HOME}/openocd/src/openocd\", ... .vscodeフォルダーに新しいファイルを作り、名前を launch.json にします。そして、設定を追加します。 { \"version\": \"0.2.0\", \"configurations\": [{ \"name\": \"Pico Zephyr Debug\", \"device\": \"RP2040\", \"gdbPath\": \"arm-none-eabi-gdb\", \"cwd\": \"${workspaceRoot}\", \"executable\": \"build/zephyr/zephyr.elf\", \"request\": \"launch\", \"type\": \"cortex-debug\", \"servertype\": \"openocd\", \"configFiles\": [ \"/interface/picoprobe.cfg\", \"/target/rp2040.cfg\" ], \"searchDir\": [\"${env:HOME}/openocd/tcl\"], \"svdFile\": \"${env:HOME}/zephyrproject/modules/hal/rpi_pico/src/rp2040/hardware_regs/rp2040.svd\", \"runToEntryPoint\": \"main\", \"postRestartCommands\": [ \"break main\", \"continue\" ] }] } 最終回路図 これはこれから使う回路の回路図です。左はハードウェアデバッガインターフェイス、右はボタンのあるターゲットボードです。 デバッグ開始 main.cを開き、行番号の左側をクリックします。それに応じてブレークポイントが追加されます。 デバッグする前にコンパイルすることを忘れないでください。次に、左側の「実行とデバッグ」アイコンをクリックします。「デバッグの開始」をクリックします。 やったー！ Zephyrコンソールの出力をシリアルターミナルで確認してみましょう。ボタンを押して、コンソールの出力を確認してみましょう。 素晴らしい！ スポンサーシップ 何もないところからプロジェクトを立ち上げるのは、とても時間がかかるものです。私がこの様なプロジェクトに取り組み続け、皆さんに新しいコンテンツを提供できるよう、支援をご検討いただければ幸いです。 Patreonで支援する（月々） Ko-fiで支援する (一回) GitHubでスポンサーになる (一回／月々) 最後に ラズパイピコ Zephyr RTOS VS Codeプロジェクトに、こちらのリンクからアクセスできます。 次のエピソードでは、ZephyrOSを使って実際のアプリケーションについて説明します。 つづく…" },{ "title" : "3Dプリンターを買う?作る?それとも… 2" ,"category" : "3dプリンター" ,"tags" : "3dプリンター, diy" ,"url" : "/ja/2022-05-29-diy-3d-printer-part-2" ,"date" : "2022年05月29日" ,"content" : "パート１を読んでいない場合は、是非読んでみてください。 この投稿では、様々な問題にどう対処し、いくらかかったかについてお話します。相当探しましたが、3軸のロボットをオークションで発見！なんと、1200円でした。取りに行くのに、車で３時間かかりましたが、まーいいでしょう…。既にYouTubeビデオを公開していますので是非見てください。 分解 ロボットを分解したら、中はこうでした。 24V 10Aの電源 3つのエンコーダ付きステッピングモーター 3つのクローズループモーションコントローラー Z軸に搭載されているステッピングモーター ステッピングモータードライバー(オープンループ) 3軸すべてに通過型光センサー 機械スペック 武蔵エンジニアリング 卓上型ロボット ShotMaster 500DS   移動距離 分解能 最大速度 X,Y 500mm 4.2μ 800mm/s Z 120mm 1μ 170mm/s 作りに申し分なく、さすがです。まー3Dプリンターにするにはもったいないけどね。このプロジェクトにおいて、あるルールを決めました。パート１で伝えたアップグレードパーツを少しずつ買い、組み立てて行って、もし、うまくいかなさそうだったら、そのパーツを安いプリンターのアップグレードに使おうと。まーそう簡単に諦めないけどね。 課題と問題 既存のコントローラーは使えない ロボットには、RS232Cインターフェースがあって、独自のプロトコルで通信可能。 最初は、マーリンのファームウェアを改造し、座標をRS232C経由で送ろうと思っていました。でも、マーリンのステップパルス発信のソースコードを確認し、そして、ディスコードのマーリンのチャットルームで聞いたら、座標をパルスに変換するだけでなく、場合によって、追加パルスを送ると知りました。既存のコントローラーボードを外し、それぞれの軸を3Dプリンターのコントローラーから制御する必要がありました。実は、これでもっとシンプルになりました。これにより、マーリンはそれぞれの軸を自在に制御できます。色々調べたら、モーションコントローラーのピン配置がわかりました。 各方向でRS422でのパルスを使っています。3DプリンターコントローラーからのTTLの方向とパルス信号をRS422信号に変換し、モーションコントローラーに接続する回路を作りました。回路図はこんな感じです。 ダイレクト式押出機の作成 機械の付属アルミプレートと古いヒートシンクを材料にしました。 さっき言ったように、4つ目のステッピングモーターがありますが、押出機フィーダーには小さすぎます。既存のステッピングモータードライバーを使いたかったので、オークションで5極ステッピングモーターを1000円で購入。金属製の押出機フィーダーパーツも購入し、ステッピングモーターに取り付けました。 押出機フィーダーステッピングモータードライバーのアップグレード 押出機フィーダーをテストしたら、ステップをスキップしていました。トルクが足りなかったんです。ドライバーのデータシートを確認したら、ドライバーに電流制限の設定があって、最大にしてもトルクが足りませんでした。オリエンタルモーターのカタログを確認したら、より高い電流の別のモデルがありました。 ドライバ モーター 定格電流 DFC5103P 0.35 A/相 DFC5107P 0.75 A/相 電流制限に使うパーツと言えば、やっぱりセメント抵抗ですよね。ドライバー基板に2つ付いてました。 使いたい電流の別のモデルの抵抗値は持っているモデルのと違っていたので、抵抗を注文し、交換しました。そして、思った通りに動作しました。これにより、オリエンタルモーターDFC5103PがDFC5107Pにアップグレードできました。 色々組み立てて行ったら 押出機を完成させて、Z軸に取り付けました。Z軸は120mmしかないので、ベースを上げる必要があって、そのためにテスト用に段ボールを使いました。周りにちょうどいいものがなくて…。 コントローラの準備　よし、必要なケーブル接続　よし、 ベルトの張り調整　よし、PIDキャリブレーション　よし、ステップキャリブレーション　よし。次は何かしらプリントするだけだ！ 初めてのプリントとレイヤーシフト問題 作業を続けるにあたり3Dプリンターとして、機能するか確認する必要がありました。テストキューブをプリントしました。これ？キューブ？ メッチャ凹みました。これまで、何も問題なさそうでした。ディスコードのマーリンのチャットルームで聞いたら、昔、外部ドライバーを使っていて同じような問題を抱えていた人がいたと親切な方に教えてもらいました。いくつかアドバイスをもらい、その1つがステップ信号を反転することでした。やってみたら、うまくいきました。 #define INVERT_X_STEP true #define INVERT_Y_STEP true Z軸のアップグレード Z軸を交換しなくちゃいけないです。一生段ボールの上にプリントする訳にいかないよね。またオークションで宝探しを始め、IAI単軸ロボシリンダーをドライバー込みで3000円で購入。既存のコントローラーはパルスドライブと互換性がありませんでした。設定は変更できますが、ケーブルもソフトウェアもありませんでした。そこで、ロボットのZ軸モーターをIAIロボシリンダーのメカに取り付けることにしました。モーターを外して、既存のカプラーと同じものを作りました。 押出機モジュールをシリンダーに、シリンダーを機械に取り付けるために必要な部品を作りました。モーター用取付板を作って、六角スペーサーを使って取り付けました。 取付板の穴はもっときれいにできたかもね、まー使えるし、隠れるし、いいっしょ。これにより、最大プリント領域は500x500x200mmになりました。 安全装置 この機械にはIO接続ボードがあります。ジャンパーしたり、電子部品を足したりして、電気的緊急停止機能を追加しました。起動時に、緊急モードになります。運転モードにするには、リセットボタンを押す必要があります。それで、モーションコントローラの電源が投入されます。非常停止ボタンを押すと、モーションコントローラの電源が切れます。非常停止ボタンを解除しても、運転モードにするにはリセットボタンを押す必要があります。ユーザーに2つのアクションをさせることは、よく知られている業界の安全対策の1つです。 ケーブルチェーンの取り付け やっと、配線だ。Y軸とZ軸用のケーブルチェーンを買い、取り付けました。配線は結構時間がかかりました。 大変でしたが、出来は悪くないでしょう？ ワーク冷却用ダクト シンギバースで検索し、いくつかのデザインを見つけました。 STLファイルをティンカーキャドにインポートし、全部組み合わせました。 その結果、こうなりました。 自動ベッドレベリング Z軸に付いている近接センサーが気になるかもしれません。取り付け後にテストしたけれど、再現精度があまり良くなくて、今は使っていません。 消費電力 消費電力を確認したところ、この電源で十分だと思います。 状態 電流 待機(非常停止ON) 0.638A サーボON待機 1.6A 原点復帰最大 1.6A ノズル温度が195C 3A ノズル温度経過 2A プリント中最大 3A - 電源　　　: 24V 10A (TDK LAMBDA ZWS240PAF-24) - ヒーター　: 24V 1.66A (40W) 最終費用 予算計画 選択肢 3, DIY + ジャンク3軸ロボット + アップグレード ジャンク3軸ロボット : 8000円 アップグレード 　 　: 2万円 合計 　 : 2万8000円 実際の費用 3軸ロボット ジャンク 1200円 IAIロボットシリンダー ジャンク 3000円 ホットエンド MK8 24V 40W 2899円 ホットエンドシリコンカバー   225円 押出機メカ MK8 1199円 押出機フィーダーステッピングモーター ジャンク 1000円 コントローラー Bigtreetech SKR v1.3 3099円 操作パネル Bigtreetech TFT 3.5 V3.0 3999円 ケーブルチェーン　   2170円 ワーク冷却用ファン 50x50x15mm 495円 押出機冷却用ファン Noctua NF-A4x10 FLX 2295円 信号変換基板   2221円 手持ちのパーツ   0円 合計：   2万3802円 パート１で話していた長所の中で、私にとってモノづくりする上で、最も重要としているSDGsの観点で、廃棄物の量を減らすことに貢献できたのではないかと思います。 クローズアップ 制作過程など他の写真をインスタに載せています。私についてページからアクセスできます。 スポンサーシップ 何もないところからプロジェクトを立ち上げるのは、とても時間がかかるものです。私がこの様なプロジェクトに取り組み続け、皆さんに新しいコンテンツを提供できるよう、支援をご検討いただければ幸いです。 Patreonで支援する（月々） Ko-fiで支援する (一回) GitHubでスポンサーになる (一回／月々) 最後に 今後の予定、Z軸用カバー、操作パネル用ボック、ぐらいですかね。" },{ "title" : "3Dプリンターを買う?作る?それとも… 1" ,"category" : "3dプリンター" ,"tags" : "3dプリンター, diy" ,"url" : "/ja/2022-05-29-diy-3d-printer-part-1" ,"date" : "2022年05月29日" ,"content" : "ジャンク産業ロボットからFDM方式3Dプリンターを作りました。予算、ニーズ、スキル、モラルは人によって異なると思いますが、自分の経験についてお話ししますので、何かしら参考になるかもしれません。 既にYouTubeビデオを公開していますので是非見てください。 概要 なぜ私に3Dプリンターが必要なのか？ 3Dプリントされたオブジェクトは個々のニーズに合わせて変更できるため、損傷した部品の修理や家電製品のスペアの作成に役立ちます。これにより、既存の製品の寿命を延ばすことができます。また、廃棄物の量を減らせるでしょう。これは、国連の持続可能な開発目標の1つである「目標12：つくる責任、使う責任」の達成に貢献できると思います。そして、メーカーにとって、3Dプリンターは不可欠なものです。 FDM方式3Dプリンターのパーツ デカルト座標FDM方式3Dプリンターのパーツについて簡単に説明します。 モーションメカニズム、XYZ軸 押出機 コールドエンド ホットエンド ダイレクト式フィーダー 電源 コントローラー 操作パネル(UI) 買わずに作った理由 どうして、新品を買う代わりに作ることにしたのか？説明していきます。 要求仕様 私が必要とする3Dプリンターの仕様について - 3Dプリントを始めたばかりなので、学習と実験のために手頃な価格である - スペアパーツが手頃な価格で入手しやすいものである - 自己維持可能 - メンテナンスが簡単 - 静か - 家庭環境で安全に使用できる（発火しないこと！） 安いプリンターを探したところ、予算は約2万8000円でした。 共通問題点 安い3Dプリンターで起きる問題を調査し、必須の修正がないか、ある場合の時間と費用について確認しました。その結果、安い3Dプリンターのほとんどでこちらの問題や改善点を見つけ、アップグレードのコストを概算しました。 非金属性押出機フィーダー関連問題 原因 非金属性であるため、数週間使用するとフィラメントが穴を侵食し、フィラメントが引きずられ、これにより、押し出し不足が発生します。 アップグレード / 改善 金属押出フィーダーへのアップグレード。 2000円 電源関連問題 原因 安価な電源を使用すると、さまざまな問題が発生します。 故障すると、ほとんどの場合、コントローラーや操作パネルに損傷を与え、場合によっては発火することもあります。 アップグレード / 改善 信頼できるブランドの電源に交換。 5500円 押し出し不足 原因 PTFEチューブは摩擦が大きすぎて、押し出し不足になります。 アップグレード / 改善 ダイレクトドライブ押出機をアップグレード。（全ての3Dプリンターと互換性があるわけではありません。） 5000円 押出機の詰まり 原因 これは主に、ホットエンドのコールドサイドが適切に冷却されていないことが原因です。 アップグレード / 改善 より良い冷却をするためにコールドエンド表面を拡張。 より良い熱制御のための可変ファン速度制御。 500円 騒音 原因 主な騒音源は、安価なモータードライブと最高速度で動作するパーツクーラーファンです。 アップグレード / 改善 モータードライバー、ダンパー、コントローラーのアップグレード（ファン速度制御） 5000円 + モータードライバー ケーブル関連問題 原因 ほとんどの安価な3Dプリンタには適切な配線がされていないため、ケーブル障害が発生します。 これは火事さえ引き起こす可能性があります！ アップグレード / 改善 ケーブル管理を行い、一部のコネクタと電源ケーブルを交換。 2000円 私にとって、これらのアップグレードや改善はマストです。合計20000円以上かかりそうです。 DIY or 購入の結論 2つの選択肢があります。 - 選択肢 1, 購入 - 新しい安価な3Dプリンター　　 　 　: 2万8000円 - アップグレード　　　　　　　　　　　　　　: 2万円 - 合計　　　　　　　　　　　　　　　　　　　: 4万8000円 - 選択肢 2, DIY + アップグレード - アップグレード : 2万円 - 機械関連 : 2万円 - 合計 　　 : 4万円 *価格は前後する可能性があります。 でも、ちょっと待って！SDGの目標12を考えると、製造されたすべての機械またはデバイスは、何らかの方法で寿命が来るまで再利用できる限り使用し、寿命が尽きたらリサイクルすべきです。これらについて考えているうち、3番目の選択肢があることに気づきました。もっと良い選択肢かも。 - 選択肢 3, DIY + ジャンク3軸ロボット + アップグレード - ジャンク3軸ロボット 　 : 8000円 - アップグレード : 2万円 - 合計 　　 : 2万8000円 とりあえずの計画 ジャンクの3軸ロボットを購入し、前述のようにアップグレードパーツを使用してその上に3Dプリンターを作り上げるのはどうかと。 長所と短所 選択肢3の長所と短所 長所: SDGsの観点では、これにより廃棄物の量を減らせる。 勉強ができる。 産業用ロボットを見つければ、位置決め精度が最高に良くなる。 短所: 購入やDIYオプションよりも時間がかかる。 色々なトラブルが発生する可能性がある。モーター制御などのために追加回路が必要になる可能性がある。 ジャンクがジャンク過ぎて、まったく使えない可能性がある。 スキルとツール 必要なスキルとツール 加工など 穴あけとテーピング、部品の作成、切断、フライス盤などの基本的なスキル。 電子回路 電子回路を安全に接続するための十分な知識。 パソコン オープンソースファームウェアのコンパイル（marlin） プログラミング 必要に応じて3Dプリンターファームウェア（marlin）のカスタマイズ。 工具など 必要な各分野のためのさまざまなツールとそれらを安全に使える知識。 キャリブレーションキューブ 話はまだ続きますが、この3Dプリンターでプリントした20mmのキャリブレーションキューブをお見せしましょう。 ちょっといわゆる象の足問題があります。まだすべてのキャリブレーションは完了していません。すでにお分かりのように、選択肢3を選び、そこそこの3Dプリンターになりました。 クローズアップ 制作過程など他の写真をインスタに載せています。私についてページからアクセスできます。 スポンサーシップ 何もないところからプロジェクトを立ち上げるのは、とても時間がかかるものです。私がこの様なプロジェクトに取り組み続け、皆さんに新しいコンテンツを提供できるよう、支援をご検討いただければ幸いです。 Patreonで支援する（月々） Ko-fiで支援する (一回) GitHubでスポンサーになる (一回／月々) 次の記事では どのような問題に対処したか？どれくらいの費用がかかったか？パート2でそれらについて話します。 つづく…" },{ "title" : "約10分で個人のWebサイトやブログを公開しよう！" ,"category" : "jekyll" ,"tags" : "jekyll テーマ" ,"url" : "/ja/2022-03-03-mr-green-jekyll-theme" ,"date" : "2022年03月03日" ,"content" : "ライブデモを見るにはここをクリック これは、私がオープン ソース コミュニティと共有した最初の大きなプロジェクトです。Mr. Greenは、Markdownで Webサイトやブログを作成し、Jekyllで生成して、GitHub Pagesで無料でホストできる多言語テーマです。 (作ったWebサイトがGitHub Pagesの利用規約に違反していないことを確認してください。) 今すぐ始めるには、Mr. Green テーマチュートリアルのプレイリストにアクセスしてください。 最後に Mr. Green Jekyll テーマはこちらのリンクからアクセスできます。" },{ "title" : "ようこそ" ,"category" : "" ,"tags" : "" ,"url" : "/ja/" ,"date" : "2022年06月16日" ,"content" : "Mr. Green’s Workshop は、古い機械や電子機器などを再利用したり、新しいものと組み合わせたり、直したりして、使えるものに変身させるノウハウを皆さんと共有することで、SDGsに貢献できればと考えています。 主に、プログラミング、ホームオートメーション(IoT)、電子工作、マイコン、DIY、3Dプリンター、ロボット、加工 / CNC、サーバー関連などのプロジェクトやコンテンツを作って行きます。 どうぞよろしくお願いいたします。" },{ "title" : "私について" ,"category" : "" ,"tags" : "" ,"url" : "/ja/tabs/about.html" ,"date" : "2022年06月16日" ,"content" : "モチベーション これまで様々な分野で働き、様々な経験を積んできました。そろそろ何かお返しをする時だと思うのです。私の父がいつもこう言っていました。”あなたがこれまで学んできたことに対する税金を、他の人と分かち合うことで支払いなさい。”と。 なぜワークショップ? 私はメイカーとして、ソフトウェア、電子回路、機械をそれぞれ若しくは組み合わせて扱うプロジェクトが好きなので、ワークショップという言葉が一番合っていると思いました。 スポンサーシップ プロジェクトを作っているだけでは、お金になりません。（今日もモヤシか。。。）プロジェクトを作り、維持するためには、多くの時間と労力が必要です。皆さんに新しいコンテンツを提供できるよう、支援をご検討いただければ幸いです。 Patreon で支援する（月々） Ko-fi で支援する (一回) GitHubでスポンサー になる (一回／月々) お問い合わせ ビジネスに関するお問い合わせは、以下のお問い合わせフォームよりご連絡をお願いいたします。" } ]
